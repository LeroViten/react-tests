{"version":3,"sources":["components/App/App.js","index.js"],"names":["App","useState","photo","setPhoto","mode","setMode","videoRef","useRef","cameraRef","useEffect","console","log","videoConstraints","width","height","facingMode","className","ref","imageSmoothing","screenshotQuality","src","alt","onClick","navigator","mediaDevices","getUserMedia","video","then","stream","current","srcObject","play","catch","err","name","toast","error","message","screenshot","getScreenshot","getTracks","forEach","track","stop","transition","Zoom","autoClose","toastStyle","backgroundColor","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAuGeA,MAjGf,WACE,MAA0BC,mBAAS,MAAnC,mBACA,GADA,UAC0BA,mBAAS,OAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,eAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAWC,iBAAO,MAClBC,EAAYD,iBAAO,MAEzBE,qBAAU,WAERC,QAAQC,IAAIP,KACX,CAACE,EAAUF,IAEd,IAAMQ,EAAmB,CACvBC,MAAO,KACPC,OAAQ,IACRC,WAAYX,GAkDd,OAAO,gCACP,sBAAKY,UAAU,gBAAf,UAEM,cAAC,IAAD,CACEC,IAAKT,EACLI,iBAAkBA,EAClBM,eAAe,OACfC,kBAAkB,MAEnBjB,GAAS,qBAAKkB,IAAKlB,EAAOmB,IAAI,mBAEjC,sBAAKL,UAAU,aAAf,UACE,wBAAQA,UAAU,MAAMM,QA3Db,WACfC,UAAUC,aACPC,aAAa,CACZC,MAAO,CAAEX,WAAYX,EAAMS,MAAO,IAAKC,OAAQ,OAEhDa,MAAK,SAACC,GACL,IAAIF,EAAQpB,EAASuB,QACrBH,EAAMI,UAAYF,EAClBF,EAAMK,UAEPC,OAAM,SAACC,GACW,yBAAbA,EAAIC,MACNC,IAAMC,MAAM,qCAEG,qBAAbH,EAAIC,MACNC,IAAMC,MAAM,oDAEG,kBAAbH,EAAIC,MACNC,IAAMC,MAAM,qCAEG,cAAbH,EAAIC,MACNC,IAAMC,MAAM,gDAEG,oBAAbH,EAAIC,MACNC,IAAMC,MAAM,8CAEd1B,QAAQ0B,MAAMH,EAAIC,MAClBxB,QAAQ0B,MAAMH,EAAII,aAgClB,mBAGA,wBAAQrB,UAAU,MAAMM,QAvBR,WACpB,IAAMgB,EAAa9B,EAAUqB,QAAQU,cAAc,CACjD1B,MAAO,IACPC,OAAQ,MAEVX,EAASmC,IAkBL,mBAGA,wBAAQtB,UAAU,MAAMM,QAlCZ,WAChBhB,EAASuB,QAAQC,UAAUU,YAAYC,SAAQ,SAACC,GAAD,OAAWA,EAAMC,WAiC5D,kBAGA,wBAAQ3B,UAAU,MAAMM,QAjCR,WACpBjB,EAAiB,SAATD,EAAkB,cAAgB,SAgCtC,uBAIF,cAAC,IAAD,CACEwC,WAAYC,IACZC,UAAW,IACXC,WAAY,CAAEC,gBAAiB,UAAWC,MAAO,iBC/FzDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.54fc3203.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport { toast, ToastContainer, Zoom } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [video, setVideo] = useState(null);\r\n  const [photo, setPhoto] = useState(null);\r\n  const [mode, setMode] = useState('environment');\r\n  const videoRef = useRef(null);\r\n  const cameraRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // getVideo();\r\n    console.log(mode);\r\n  }, [videoRef, mode]);\r\n\r\n  const videoConstraints = {\r\n    width: 1280,\r\n    height: 720,\r\n    facingMode: mode,\r\n  };\r\n\r\n  const getVideo = () => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        video: { facingMode: mode, width: 320, height: 240 },\r\n      })\r\n      .then((stream) => {\r\n        let video = videoRef.current;\r\n        video.srcObject = stream;\r\n        video.play();\r\n      })\r\n      .catch((err) => {\r\n        if (err.name === 'OverconstrainedError') {\r\n          toast.error('This camera mode is not supported');\r\n        }\r\n        if (err.name === 'NotReadableError') {\r\n          toast.error('There was hardware problem, please reload a page');\r\n        }\r\n        if (err.name === 'NotFoundError') {\r\n          toast.error('No compatible camera source found');\r\n        }\r\n        if (err.name === 'TypeError') {\r\n          toast.error('Video stream error in not secure environment');\r\n        }\r\n        if (err.name === 'NotAllowedError') {\r\n          toast.error('You rejected permission to use your camera');\r\n        }\r\n        console.error(err.name);\r\n        console.error(err.message);\r\n      });\r\n  };\r\n\r\n  const stopVideo = () => {\r\n    videoRef.current.srcObject.getTracks().forEach((track) => track.stop());\r\n  };\r\n\r\n  const switchCameras = () => {\r\n    setMode(mode === 'user' ? 'environment' : 'user');\r\n  };\r\n\r\n  const getScreenshot = () => {\r\n    const screenshot = cameraRef.current.getScreenshot({\r\n      width: 800,\r\n      height: 600,\r\n    });\r\n    setPhoto(screenshot);\r\n  };\r\n\r\n  return <div>\r\n  <div className=\"streamWrapper\">\r\n        {/* <video ref={videoRef} /> */}\r\n        <Webcam\r\n          ref={cameraRef}\r\n          videoConstraints={videoConstraints}\r\n          imageSmoothing=\"true\"\r\n          screenshotQuality=\"1\"\r\n        />\r\n        {photo && <img src={photo} alt=\"screen snap\" />}\r\n      </div>\r\n      <div className=\"btnWrapper\">\r\n        <button className=\"btn\" onClick={getVideo}>\r\n          START\r\n        </button>\r\n        <button className=\"btn\" onClick={getScreenshot}>\r\n          PHOTO\r\n        </button>\r\n        <button className=\"btn\" onClick={stopVideo}>\r\n          STOP\r\n        </button>\r\n        <button className=\"btn\" onClick={switchCameras}>\r\n          SWITCH\r\n        </button>\r\n      </div>\r\n      <ToastContainer\r\n        transition={Zoom}\r\n        autoClose={4000}\r\n        toastStyle={{ backgroundColor: '#c57d7d', color: '#000000' }}\r\n      /></div>;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App.js';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}